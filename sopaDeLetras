#define _WIN32_WINNT 0x0500  // Define la version de Windows (Windows 2000)
#include <wingdi.h>          // Funciones graficas GDI
#include <windows.h>         // API base de Windows
#include <stdio.h>	         // Entrada y salida de archivos
#include <stdlib.h>          // Malloc y rand
#include <stdbool.h>         // Bool
#include <time.h> 	         // Srand
#include <string.h>          // Funciones de cadenas (strcpy, strcmp)

// METETE A SETTINGS, COMPILER, LINKER SETTINGS Y EN OTHER LINKER OPTIONS PON LO SIGUIENTE: -lgdi32 -luser32 -lkernel32

// Estructura para dibujar celdas
typedef struct {
	char letra;      	 // La letra que contiene la celda
	bool seleccionada;   // ¿Está seleccionada?
	bool encontrada; 	 // ¿La palabra a la que pertenece fue encontrada?
	bool flotada;        // ¿El cursor esta sobre la celda?
} CeldaEstado;

// Estructura para palabras
struct pals {
	int largo;       	// Longitud de la palabra
	char escribe[11];	// La palabra (max 10 caracteres + '\0')
	char direcion;   	// Direccion: 'h' (horizontal) o 'v' (vertical)
	int startX;      	// Posición inicial x
	int startY;      	// Posición inicial y
	bool encontrada; 	// ¿Fue encontrada la palabra?
};

// Estado del usuario (cursor y seleccion)
struct user {
	int ver;         	// Posicion vertica)
	int hor;         	// Posicion horizontal
	int SEL[2];      	// Coordenadas de usuario
	bool seleccionando;  // ¿Está en medio de una selección?
};

// Variables globales
int size = 18;       	  // Tamano de la cuadricula (18x18)
int nPalabras;       	  // Numero de palabras
int pFaltantes;           // Palabras por encontrar
int sopasResueltas = 0;   // Cantidad de sopas resueltas
struct pals* palabras;    // Lista dinamica de palabras
char** grid;         	  // Matriz de letras (sopa)
CeldaEstado** estadoSopa; // Matriz de estado de celdas
struct user uPOS;    	  // Posicion y estado del usuario
HWND ghWnd;          	  // Identificador de la ventana principal
char** letrasRand;        // Letras aleatorias para celdas vacías

// Declaraciones de funciones (como prototipos)
void sinPalabras();   	     // Crea archivo de palabras si no existe
int cuentaPalabras(); 	     // Cuenta las palabras en el archivo
void cargarPalabras();	     // Mover las palabras del archivo a el programa
void ponPalabras();   	     // Coloca las palabras en la cuadrícula
void step(WPARAM wParam);    // Maneja teclas presionadas
void mueveP(char tecla);     // Mueve el cursor
void seleccion();     	     // Maneja la seleccion de palabras
void verificarPalabra();     // Checa si la selección es correcta
void actualizarSeleccion();  // Actualiza seleccion visual
void reiniciarSopa();        // Prepara nueva sopa

// Funcion principal para manejar eventos de Windows
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
// hwnd es el identificador de la ventana que recibe el mensaje
// uMsg es el codigo del mensaje
// wParam es la informacion adicional que tenga el mensaje
// lParam es mas informacion todavia

// Punto de entrada principal para aplicaciones Windows (equivalente a main())
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow) {
// hInst es el identificador de la instancia
// HINSTANCE hPrevInst es obsoleto pero igual lo piden
// LPSTR lpCmdLine es por si usas linea de comandos que no uso pero igual windows lo pide igual
// nCmdShow es como se muestra la ventana inicialmente


	// Hace que los numeros sean aleatoreos
	srand((unsigned int)time(NULL));

	// Inicializa posicion del usuario
	uPOS.ver = 0;    	// Fila inicial
	uPOS.hor = 0;    	// Columna inicial
	uPOS.SEL[0] = -1;	// Sin selección inicial
	uPOS.SEL[1] = -1;
	uPOS.seleccionando = false; // No está seleccionando

	// Reserva memoria para matrices
	estadoSopa = (CeldaEstado**)malloc(size * sizeof(CeldaEstado*));
	letrasRand = (char**)malloc(size * sizeof(char*));
	grid = (char**)malloc(size * sizeof(char*));

	for (int i = 0; i < size; i++) {
    	estadoSopa[i] = (CeldaEstado*)malloc(size * sizeof(CeldaEstado));
    	letrasRand[i] = (char*)malloc(size * sizeof(char));
        grid[i] = (char*)malloc(size * sizeof(char));

    	for (int j = 0; j < size; j++) {
        	estadoSopa[i][j] = (CeldaEstado){'.', false, false};
        	letrasRand[i][j] = 'A' + rand() % 26; // Letra aleatoria A-Z
        	grid[i][j] = '.';  // Inicialmente vacia
    	}
	}

	// Si no existe el archivo de palabras, crearlo
    if (GetFileAttributesA("palabras.txt") == INVALID_FILE_ATTRIBUTES) {
    	sinPalabras();
	}

	// Contar palabras y reservar memoria
	nPalabras = cuentaPalabras();
	pFaltantes = nPalabras;
	palabras = malloc(nPalabras * sizeof(struct pals));

	cargarPalabras();  // Cargar palabras a memoria
	ponPalabras();  // Colocar las palabras en la cuadrícula

	// Define la ventana
	WNDCLASS wc = {0};                          // Crea una estructura WNDCLASS inicializada a ceros. WNDCLASS es la estructura que define como va a funcionar la ventana
	wc.lpfnWndProc = WindowProc;                // Funcion que maneja los mensajes (Teclas que el usuario pica o otras cosas de windows)
	wc.hInstance = hInst;      	                // Identificador de instancia actual. Que windows diferencie esta instancia de otros programas
	wc.lpszClassName = "SopaLetras";            // Nombre para identificar esta ventana en el sistema
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);   // Que cursor mostrar cuando estas sobre esta ventana (El normal)
	RegisterClass(&wc);         	            // Registra la clase en Windows

	// Crea la ventana
	ghWnd = CreateWindow(
    	"SopaLetras",       	// Nombre de ventana
    	"Sopa de Letras",      	// Título de la ventana
    	WS_OVERLAPPEDWINDOW,   	// Estilo de ventana: estandar
    	CW_USEDEFAULT,          // Posicion X
    	CW_USEDEFAULT,          // Posicion Y
    	800, 600,              	// Ancho y alto
    	NULL, NULL,             // Sin ventana padre ni menu
    	hInst, NULL	            // Instancia y datos adicionales
	);

	// Mostrar y actualizar ventana
	ShowWindow(ghWnd, nCmdShow); // Muestra la ventana. nCmdShow dice si la ventana esta maximizada o normal o de otra forma
	UpdateWindow(ghWnd);         // Fuerza repintar la ventana (por primera vez)

	// Bucle principal de mensajes (Donde windows le manda informacion a el programa ya sea teclas o algo mas)
	MSG msg;    // Estructura para almacenar mensajes
	while (GetMessage(&msg, NULL, 0, 0)) {  // Recive los mensajes de windows, no pasa si no hay mensaje
    	TranslateMessage(&msg);             // Convierte los mensajes del teclado a caracteres
    	DispatchMessage(&msg);              // Envia estos mensajes a WindowProc
	}

	return (int)msg.wParam; // Regresa al codigo


}

// Función que maneja los mensajes de la ventana
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	switch (uMsg) {
    	case WM_KEYDOWN: // Si se presiona una tecla
        	step(wParam); // Procesa la tecla
        	break;

    	case WM_PAINT: { // Dibujar
        	PAINTSTRUCT ps;
        	HDC hdc = BeginPaint(hwnd, &ps);  // Iniciar pintado

        	// Dimensiones de la sopa de letras
        	const int gridSize = 550; // Tamaño total de la sopa
        	const int buffer = 10;	// Margen alrededor
        	const int cellSize = gridSize / size; // Tamaño de cada celda

        	// Crear fonts

        	// CreateFont(Altura,  Anchura, No entiendo pero no lo tocare entonces no importa, Orientacion, Grosor (Normal o Negrita), Italico?, Subrayado?, Tachado?,
                      //  DEFAULT_CHARSET = caracteres normales osea ascii, font)
        	HFONT hFontNormal = CreateFont(20, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE,
                                    	DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
                                    	DEFAULT_QUALITY, DEFAULT_PITCH, "Arial");
        	HFONT hFontBold = CreateFont(20, 0, 0, 0, FW_BOLD, FALSE, FALSE, FALSE,
                                  	DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
                                  	DEFAULT_QUALITY, DEFAULT_PITCH, "Arial");

        	// Pintar fondo blanco
        	RECT rect;
        	GetClientRect(hwnd, &rect); // Tamano de area en la ventana que puedes usar
        	FillRect(hdc, &rect, (HBRUSH)(COLOR_WINDOW+1)); // llena el rectangulo con fondo blanco usando el pincel normal

        	// Dibujar líneas de la cuadrícula
        	for (int i = 0; i <= size; i++) {
            	// Líneas verticales
            	MoveToEx(hdc, buffer + i * cellSize, buffer, NULL); // Donde la linea empieza
            	LineTo(hdc, buffer + i * cellSize, gridSize);       // Donde la linea termina

            	// Líneas horizontales
            	MoveToEx(hdc, buffer, buffer + i * cellSize, NULL); // Donde la linea empieza
            	LineTo(hdc, gridSize, buffer + i * cellSize);       // Donde la linea termina
        	}

        	// Dibujar letras en cada celda
        	for (int i = 0; i < size; i++) {
            	for (int j = 0; j < size; j++) {
                	char displayChar;
                	// Si hay una letra ponerla, sino poner una random (pero que siempre sea la misma sino cambian cada vez)
                	if (grid[i][j] != '.') {
                    	displayChar = grid[i][j];
                	} else {
                    	displayChar = letrasRand[i][j];
                	}

                	char str[2] = {displayChar, '\0'}; // Crear cadena para dibujar

                	// Posición para centrar el texto en la celda
                	int x_pos = buffer + j * cellSize + cellSize / 3;
                	int y_pos = buffer + i * cellSize + cellSize / 4;

                	// Hacer las letras sobre el cursor bold para que sepas donde esta el cursor
                	if (estadoSopa[i][j].flotada) {
                    	SelectObject(hdc, hFontBold);
                    } else {
                    	SelectObject(hdc, hFontNormal);
                    }

                	// Diferentes colores dependiendo de el estado de la celula
                	if (estadoSopa[i][j].encontrada) {
                    	SetTextColor(hdc, RGB(0, 128, 0));  // Verde: palabra encontrada
                	} else if (estadoSopa[i][j].seleccionada) {
                    	SetTextColor(hdc, RGB(255, 0, 0));  // Rojo: celda seleccionada
                	} else {
                    	SetTextColor(hdc, RGB(0, 0, 0));	// Negro: normal
                	}

                	// Dibujar la letra
                	TextOut(hdc, x_pos, y_pos, str, 1);
            	}
        	}

            // Mostrar el numero de sopas resueltas (No me dio tiempo de hacer un menu o un fin real entonces esta fue mi solucion :3)
            char resueltasStr[50];
            SelectObject(hdc, hFontNormal);
            SetTextColor(hdc, RGB(0, 0, 0));
            sprintf(resueltasStr, "Sopas Resueltas: %d", sopasResueltas);
            TextOut(hdc, gridSize + buffer, buffer, resueltasStr, strlen(resueltasStr));

            // Mostrar cuantas palabras faltan
            char infoStr[50];
            sprintf(infoStr, "Faltan: %d palabras", pFaltantes); // String que dice cuantas palabras faltan
            SelectObject(hdc, hFontNormal);
            SetTextColor(hdc, RGB(0, 0, 0));
            TextOut(hdc, gridSize + buffer, buffer + cellSize, infoStr, strlen(infoStr)); // Imprime String

            // Mostrar palabras que faltan
            int yOffset = buffer + 2 * cellSize; // Distancia entre oraciones impresas en el lado
        	for (int i = 0; i < nPalabras; i++) {
                if (!palabras[i].encontrada) { // Si la palabra no ha sido encontrada
                    SelectObject(hdc, hFontNormal);
                    SetTextColor(hdc, RGB(0, 0, 0));
                    TextOut(hdc, gridSize + buffer, yOffset, palabras[i].escribe, strlen(palabras[i].escribe)); // Imprime la palabra
                    // Pensaba tener que si la habias encontrado la tachara pero como no siempre aparecen todas las palabras asi no se tachaban palabras que no habian aparecido
                    yOffset += 25;  // Incrementa el buffer
                }
        	}

        	// Mostrarle los controles al usuario
            yOffset += 50; // Subir el buffer doble para que el usuario no confunda esto con las palabras faltantes
            SelectObject(hdc, hFontNormal);
            SetTextColor(hdc, RGB(0, 0, 0));
            TextOut(hdc, gridSize + buffer, yOffset, "FECHAS mueven", 13); // Te dice que te mueves con las flechas

            yOffset += 25;
            SelectObject(hdc, hFontNormal);
            SetTextColor(hdc, RGB(0, 0, 0));
            TextOut(hdc, gridSize + buffer, yOffset, "ESPACIO selecciona", 18); // Te dice que con espacio seleccionas una celula

            yOffset += 25;
            SelectObject(hdc, hFontNormal);
            SetTextColor(hdc, RGB(0, 0, 0));
            TextOut(hdc, gridSize + buffer, yOffset, "ENTER verifica ", 14); // Te dice que con enter verificas la palabra

            // (SelectObject(hdc, hFontNormal);) y (SetTextColor(hdc, RGB(0, 0, 0));) nadamas hacen que el font sea normal y que el texto sea negro

        	// Limpiar recursos
        	DeleteObject(hFontNormal);
        	DeleteObject(hFontBold);
        	EndPaint(hwnd, &ps);  // Finalizar pintado
        	break;
    	}

    	case WM_DESTROY: // Cuando se cierra la ventana
        	// Liberar toda la memoria reservada
        	for (int i = 0; i < size; i++) {
                free(letrasRand[i]);
            	free(estadoSopa[i]);
            	free(grid[i]);
        	}
        	free(letrasRand);
        	free(estadoSopa);
        	free(grid);
        	free(palabras);

        	PostQuitMessage(0); // Salir de la aplicación
        	break;

    	default:
        	// Si es otra cosa namas has lo que windows dice que hagas por default
        	return DefWindowProc(hwnd, uMsg, wParam, lParam);
	}
	return 0;
}

// Crea un archivo de palabras por defecto si no existe
void sinPalabras() {
	FILE *fptr = fopen("palabras.txt", "w");
	if (!fptr) return;

	// Escribir palabras por defecto (en mayúsculas)
	fprintf(fptr, "QUESO\n");
	fprintf(fptr, "ESNUPI\n");
	fprintf(fptr, "PELICULA\n");
	fprintf(fptr, "ASTRONAUTA\n");
	fprintf(fptr, "CALZON\n");
	fprintf(fptr, "HIGO\n");

	fclose(fptr);
}

// Cuenta las palabras en el archivo (una por línea)
int cuentaPalabras() {
	FILE *fptr = fopen("palabras.txt", "r");
	if (!fptr) return 0;

	int count = 0;
    char line[20];
    // Contar líneas usando fgets
    while (fgets(line, sizeof(line), fptr)) {
        count++;
    }

    // Si el archivo no terminó con nueva línea
    if (count > 0 && line[strlen(line)-1] != '\n') {
        count++;
    }
	fclose(fptr);
	return count;
}

// Lee las palabras del archivo a la memoria
void cargarPalabras() {
	FILE *fptr = fopen("palabras.txt", "r");
	if (!fptr) return;

	char line[20];
	int idx = 0;

	while (fgets(line, sizeof(line), fptr)) {
    	// Eliminar salto de línea
    	line[strcspn(line, "\n")] = '\0';
    	// Copiar la palabra
    	strcpy(palabras[idx].escribe, line);
    	// Guardar su longitud
    	palabras[idx].largo = strlen(line);
    	// Inicializarla como no encontrada
    	palabras[idx].encontrada = false;
    	idx++;
	}
	fclose(fptr);
}

// Coloca las palabras en la cuadrícula
void ponPalabras() {
    int p, intentos, dir, max_pos, x, y, c;
    bool colocada, compatible;
    int posX, posY;
    char letra;

	for (int p = 0; p < nPalabras; p++) {
        colocada = false;
        intentos = 10000;  // Maximos intentos por palabra

        while (!colocada && intentos-- > 0) {
            // Elegir dirección aleatoria (0 = horizontal, 1 = vertical)
            dir = rand() % 2;
            // Maxima posicion posible que quepa en la sopa
            max_pos = size - palabras[p].largo;

            // Si la palabra no cabe, saltarla
            if (max_pos <= 0) continue;

            // Posición inicial aleatoria
            if (dir == 0) {
                x = rand() % size;
                y = rand() % max_pos;
            }
            if (dir == 1) {
                x = rand() % max_pos;
                y = rand() % size;
            }

            compatible = true;

            // Verificar que no haya conflictos
            for (int c = 0; c < palabras[p].largo; c++) {
                posX = (dir == 0) ? x : x + c;
                posY = (dir == 0) ? y + c : y;

                // Solo permitir si está vacío o coincide con la misma letra
                if (grid[posX][posY] != '.' && grid[posX][posY] != palabras[p].escribe[c]) {
                    compatible = false;
                }
            }
        }

        // Si despues de todos los intentos no se puede poner en una posicion valida, no la pongas, quitala de las palabras faltantes y marcala como encontrada y salte de esta funcion
        if (compatible == false) {
            palabras[p].encontrada = true;
            pFaltantes--;
            continue;
        }

    	// Guardar la posicion de la palabra
    	palabras[p].startX = x;
    	palabras[p].startY = y;
    	// Asignar direccion como caracter
    	palabras[p].direcion = (dir == 0) ? 'h' : 'v';

    	// Colocar cada letra en su cuadricula
    	for (int c = 0; c < palabras[p].largo; c++) {
            char letra = palabras[p].escribe[c];
        	if (dir == 0) {  // Horizontal
            	grid[x][y + c] = letra;
            	estadoSopa[x][y + c].letra = letra;
        	} else {  // Vertical
            	grid[x + c][y] = letra;
            	estadoSopa[x + c][y].letra = letra;
        	}
    	}
    	// Define la palabra como colocada
    	colocada = true;
	}
}

// Maneja las teclas presionadas
void step(WPARAM wParam) {
	switch(wParam) {
    	case VK_LEFT:
    	    mueveP('L'); // Flecha izquierda
    	    break;
    	case VK_RIGHT:   // Flecha derecha
    	    mueveP('R');
    	    break;
    	case VK_UP:	     // Flecha arriba
    	    mueveP('U');
    	    break;
    	case VK_DOWN:    // Flecha abajo
    	    mueveP('D');
    	    break;
    	case VK_SPACE:   // Espacio: inicio/selección
    	    seleccion(); // Selecciona o desselecciona la celula
    	    break;
    	case VK_RETURN:  // Enter: confirmar selección
        	if (uPOS.seleccionando) {
            	verificarPalabra(); // Verifica que la palabra sea correcta
            	seleccion();        // Quita tu seleccion
        	}
        	break;
	}
	// Volver a pintar la ventana en base a tu accion
	InvalidateRect(ghWnd, NULL, TRUE);
}

// Mueve el cursor según la tecla presionada
void mueveP(char tecla) {
    // Desmarca celda actual
    estadoSopa[uPOS.ver][uPOS.hor].flotada = false;

    // Actualiza posicion segun tecla
	if (tecla == 'U' && uPOS.ver > 0) uPOS.ver--;   // Arriba
	else if (tecla == 'D' && uPOS.ver < size - 1) uPOS.ver++;   // Abajo
	else if (tecla == 'L' && uPOS.hor > 0) uPOS.hor--;  // Izquierda
	else if (tecla == 'R' && uPOS.hor < size - 1) uPOS.hor++;   // Derecha

    // Marcar nueva seleccion
    estadoSopa[uPOS.ver][uPOS.hor].flotada = true;

    // Actualizar seleccion visual
    actualizarSeleccion();
}

// Maneja la selección de palabras
void seleccion() {
	if (!uPOS.seleccionando) {
    	// Inicia seleccion
    	uPOS.SEL[0] = uPOS.ver;
    	uPOS.SEL[1] = uPOS.hor;
    	uPOS.seleccionando = true;

    	estadoSopa[uPOS.ver][uPOS.hor].seleccionada = true;
	} else {
    	// Termina seleccion
        uPOS.SEL[0] = -1;
    	uPOS.SEL[1] = -1;
    	uPOS.seleccionando = false;
	}
}

// Actualizar seleccion visual
void actualizarSeleccion() {
    // Quitar seleccion previa
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            estadoSopa[i][j].seleccionada = false;
        }
    }

    if (uPOS.seleccionando) {

        int x0 = uPOS.SEL[0];
        int y0 = uPOS.SEL[1];
        int x1 = uPOS.ver;
        int y1 = uPOS.hor;

        bool esHorizontal = (x0 == x1);
        bool esVertical = (y0 == y1);

        // Si es diagonal, cancelar selección
        if (!esHorizontal && !esVertical) {
            uPOS.SEL[0] = -1;
            uPOS.SEL[1] = -1;
            uPOS.seleccionando = false;
        }
        // Si es línea recta, marcar el rango
        else if (esHorizontal || esVertical) {

            // si x1 es igual a x0, dx iguala 0; si x1 es mayor a x0, dx iguala 1; else dx iguala menos uno
            int dx = (x1 == x0) ? 0 : (x1 > x0) ? 1 : -1;
            // si y1 es igual a y0, dy iguala 0; si xy es mayor a y0, dy iguala 1; else dy iguala menos uno
            int dy = (y1 == y0) ? 0 : (y1 > y0) ? 1 : -1;

            // !!

            int x = x0, y = y0;

            while (1) {
                estadoSopa[x][y].seleccionada = true;
                if (x == x1 && y == y1) break;
                x += dx;
                y += dy;
            }

            // !!
        }
    }
}

void reiniciarSopa() {
    // Liberar memoria existente
    for (int i = 0; i < size; i++) {
        free(letrasRand[i]);
        free(estadoSopa[i]);
        free(grid[i]);
    }
    free(letrasRand);
    free(estadoSopa);
    free(grid);
    free(palabras);

    // Reinicializar matrices
    estadoSopa = (CeldaEstado**)malloc(size * sizeof(CeldaEstado*));
    grid = (char**)malloc(size * sizeof(char*));
    letrasRand = (char**)malloc(size * sizeof(char*));

    // Inicializar matrices
    for (int i = 0; i < size; i++) {
        estadoSopa[i] = (CeldaEstado*)malloc(size * sizeof(CeldaEstado));
        grid[i] = (char*)malloc(size * sizeof(char));
        letrasRand[i] = (char*)malloc(size * sizeof(char));

        for (int j = 0; j < size; j++) {
            // Inicializar celdas
            estadoSopa[i][j] = (CeldaEstado){'.', false, false, false};
            grid[i][j] = '.';
            letrasRand[i][j] = 'A' + rand() % 26;
        }
    }

    // Reinicializar posición del usuario
    uPOS.ver = 0;
    uPOS.hor = 0;
    uPOS.SEL[0] = -1;
    uPOS.SEL[1] = -1;
    uPOS.seleccionando = false;

    // Recargar palabras
    nPalabras = cuentaPalabras();
    pFaltantes = nPalabras;
    palabras = (struct pals*)malloc(nPalabras * sizeof(struct pals));
    cargarPalabras();
    ponPalabras();
}

// Verifica si la palabra seleccionada es correcta
void verificarPalabra() {
	int inicioX = uPOS.SEL[0]; // Fila inicial
	int inicioY = uPOS.SEL[1]; // Columna inicial
	int finX = uPOS.ver;   	// Fila final
	int finY = uPOS.hor;   	// Columna final

	// Determinar en que direccion selecciono el usuario
	int dx = (finX == inicioX) ? 0 : (finX > inicioX) ? 1 : -1;
	int dy = (finY == inicioY) ? 0 : (finY > inicioY) ? 1 : -1;

	// !!

	char palabra[20] = {0}; // Buffer para almacenar palabra
	int idx = 0;            // counter
	int x = inicioX, y = inicioY;   // comienza en la posicion inicial

	// Recorrer desde inicio hasta fin
	while (x != finX + dx || y != finY + dy) { // si x o y no es el punto final + 1 (para no excluir la ultima letra)
    	palabra[idx++] = grid[x][y]; // Toma la letra actual, le suma uno al buffer de la palabra y la anade alli
    	x += dx; // Mover en dirección X
    	y += dy; // Mover en dirección Y
    	if (idx >= 12) break; // Previene desbordamiento
	}

    // !!

	// Buscar la palabra en la lista
	for (int i = 0; i < nPalabras; i++) {
    	if (!palabras[i].encontrada &&
        	strcmp(palabra, palabras[i].escribe) == 0) {

        	// Marcar palabra como encontrada
        	palabras[i].encontrada = true;
        	pFaltantes--;

            // Si era la ultima palabra que faltaba
            if (pFaltantes == 0) {
                sopasResueltas++;  // Incrementar contador de sopas resueltas
                reiniciarSopa();   // Generar nueva sopa
                break;
            }

            // Guardar coordenadas como coordenadas iniciales
        	x = palabras[i].startX;
        	y = palabras[i].startY;

        	// Marcar cada letra como encontrada
        	for (int c = 0; c < palabras[i].largo; c++) {
            	estadoSopa[x][y].encontrada = true;
            	// Mover segun la direccion de la palabra
            	if (palabras[i].direcion == 'h') y++;
            	else x++;
        	}
        	break;
    	}
	}
	// deseleccionar las celulas
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            estadoSopa[i][j].seleccionada = false;
        }
    }
}
