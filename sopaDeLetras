#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <unistd.h>
#include <sys/stat.h>


struct pals{
    int largo;
    char escribe[10];
    char direcion; // h, v, d, D
    //bool select = 0;
    //bool hover = 0;
};

struct user{
    int ver;
    int hor;
    int SEL[2] = 0, 0;
};

void sinPalabras(); // si no hay palabras en palabras.txt v/
int cuentaPalabras(); // cuenta palabras regresa nPalabras v/
//void ponPalabras(); pone las palabras en la estructura */
//void creaSopa(pals palabras); pone las palabras en la sopa */

//void dibujaSopa(tabla[size][size);  //dibuja la sopa inicial */

void step(); // usuario se mueve con las flechas y selecciona con espacio; */
void mueveP(char tecla); // mueve la posicion de el usuario */
void seleccion(); // checa si la palabra seleccionada es correcta

void mSopa(); // modifica la sopa en base a las acciones del usuario

void dibujaUI(); // dibuja el UI inicial
void mUI(); // modifica el UI
void pause(); // pausa el juego

void dibujaMenuP(); // dibuja el menu principal
void mMenuP(); // modifica el menu principal

int main() {
    int size = 18;
    int tabla[size][size];

    FILE *fptr;

    if(access("palabras.txt", F_OK) != 0) {
        sinPalabras();
    }
    int nPalabras = cuentaPalabras();

    printf("%d\n",nPalabras);

    struct pals palabras[nPalabras];

    //pone las palabras en la estructura

    int foo, large = 0;
    int c;
    char bar[10];

    fptr = fopen("palabras.txt", "r");

    for (c = getc(fptr); c != EOF; c = getc(fptr)) {
        if (c == '\n') {
            printf(" %s ", bar);
            palabras[foo].largo = large;
            large = 0;
            strcpy(palabras[foo].escribe, bar);
            memset(bar, '\0', 10);
            // palabras[foo].direccion = rand() % 2; 0 = horizontal 1 = vertical
        } else {
            bar[large] = c;
            large += 1;
            printf("%d", large);
        }
    }
    fclose(fptr);

    //pone las palabras en la sopa
        // ordena las palabras por longitud
        // for palabra mas larga a palabra mas corta
            // si comparte letra con una ya en el tablero {
                //si cabe la palabra en ese lugar {
                    //pon la palabra en ese lugar
            // poMax = size - palabras[foo].largo
            // pos = rand() % poMax;
            // si pos no tiene ninguna otra palabra
                // if (palabras[foo].direccion = 1) {
                    //si no hayan letras en el camino
                        //pon las palabras horizontalmente
                    //else vuelve a intentar
                //} else {
                    //si no hayan letras en el camino
                        //pon las palabras verticalmente
                    //else vuelve a intentar
                //}
    // int gd = DETECT, gm;
    // initgraph(&gd, &gm, "");

    // dibujaSopa();

    // struct user uPOS;
    // int pFaltantes = nPalabras;

    // step();
}

void sinPalabras() {
    FILE *fptr;
    fptr = fopen("palabras.txt", "w");

    fprintf(fptr, "%s", "qUESo\n");
    fprintf(fptr, "%s", "eSNUPi\n");
    fprintf(fptr, "%s", "pELICULAs\n");
    fprintf(fptr, "%s", "aSTRONAUTa\n");
    fprintf(fptr, "%s", "cALZOn\n");
    fprintf(fptr, "%s", "hIGo\n");

    fclose(fptr);
}

int cuentaPalabras() {
    FILE *fptr;
    fptr = fopen("palabras.txt", "r");

    //cuenta cuantas palabras hay
    char c;
    int nPalabras = -1;
    for (c = getc(fptr); c != EOF; c = getc(fptr)) {
        if (c == '\n') {
            nPalabras = nPalabras + 1;
        }
    }
    fclose(fptr);
    return nPalabras;
}

// void dibujaSopa(tabla[size][size]) {
    // genera size * size letras random
    // ponlas en los espacios vacios

    // Rectangle(hdc, 100, 100, x, x); // Draw a rectangle
    // k = x / size
    // for (i; i > size; i++) {
        // line(100+k*i, 100, 100+k, size);
        // line(100, 100+k*i, size, 100+k );

    // settextstyle(DEFAULT_FONT, HORIZ_DIR, 2); // Set font, direction, and size
    // setcolor(WHITE); // Set text color
    // for (i; i> size; i++) {
        // for (j, j> size; j++) {
            // outtextxy(125+(i*k), 125+(j*k), tabla[i][j]);
    //}
// }

// void step () {
    // kPress = getch();
    // if kPress = 'UP' ? mueveP('U') : if kPress = 'DOWN' ? mueveP('D') : if kPress = 'LEFT' ? mueveP('L') : if kPress = 'RIGHT' ? mueveP('R') : if kPress = 'SPACE' ? seleccion() : if kPress = 'ENTER' ? seleccion() : step();
// }

// void mueveP(char tecla) {
    // if tecla = U && uPos.ver > 1
        // uPos.ver++;
    // if tecla = D && uPos.ver < size
        // uPos.ver--;
    // if tecla = L && uPos.hor > 1
        // uPos.hor++;
    // if tecla = R && uPos.hor < size
        // uPos.hor--;
//}

// void seleccion() {
    // if uPos.SEL = 0,0 {
        // uPos.SEL = uPos.hor , uPos.ver;
    // else if (grid[uPos.SEL[1]][uPos.SEL[2]] == minuscula) && (grid[uPos.hor][uPos.ver] == minuscula) {
        // pFaltantes --;
        // mSopa //no c como pero que haga las letras en seleccion bold
//}
